import { UserAttempt } from '../models/UserAttempt.js';
import { AttemptAnswer } from '../models/AttemptAnswer.js';
import { QuestionOption } from '../models/QuestionOption.js';
import { AttemptArtifact } from '../models/AttemptArtifact.js';
import { UserSkillProgress } from '../models/UserSkillProgress.js';
const autoGradeMCQ = async (question_id, chosen_option_id)=>{ const opt=await QuestionOption.findOne({ _id:chosen_option_id, question_id }); if(!opt) return { is_correct:false, points:0 }; return { is_correct:!!opt.is_correct, points: opt.is_correct?1:0 }; };
export const startAttempt = async (req,res)=>{ const att=await UserAttempt.create({ user_id:req.user.id, ...req.body }); res.json(att); };
export const answerQuestion = async (req,res)=>{ const { attempt_id, question_id, chosen_option_id, answer_text }=req.body; const att=await UserAttempt.findOne({ _id:attempt_id, user_id:req.user.id }); if(!att) return res.status(404).json({ message:'Attempt not found' }); let is_correct,score; if(chosen_option_id){ const g=await autoGradeMCQ(question_id,chosen_option_id); is_correct=g.is_correct; score=g.points; } const ans=await AttemptAnswer.findOneAndUpdate({ attempt_id, question_id },{ chosen_option_id, answer_text, is_correct, score },{ upsert:true, new:true }); res.json(ans); };
export const submitAttempt = async (req,res)=>{ const { attempt_id }=req.body; const att=await UserAttempt.findOne({ _id:attempt_id, user_id:req.user.id }); if(!att) return res.status(404).json({ message:'Attempt not found' }); const answers=await AttemptAnswer.find({ attempt_id }); const totalScore=answers.reduce((s,a)=>s+(a.score||0),0); const correctCount=answers.filter(a=>a.is_correct).length; att.status='SUBMITTED'; att.score=totalScore; att.submitted_at=new Date(); await att.save(); await UserSkillProgress.findOneAndUpdate({ user_id:req.user.id, skill_id:att.skill_id, level_id:att.level_id },{ $inc:{ total_attempts:1, correct_count: correctCount>0?1:0, total_score: totalScore }, $set:{ last_activity_at:new Date() } },{ upsert:true, new:true }); res.json({ attempt_id, totalScore, correctCount }); };
export const getAttemptDetail = async (req,res)=>{ const att=await UserAttempt.findOne({ _id:req.params.id, user_id:req.user.id }); if(!att) return res.status(404).json({ message:'Not found' }); const answers=await AttemptAnswer.find({ attempt_id:att._id }); res.json({ attempt:att, answers }); };
export const addArtifact = async (req,res)=>{ const { id }=req.params; const att=await UserAttempt.findOne({ _id:id, user_id:req.user.id }); if(!att) return res.status(404).json({ message:'Attempt not found' }); const art=await AttemptArtifact.create({ attempt_id:id, ...req.body }); res.status(201).json(art); };
export const getMyProgress = async (req,res)=>{ const list=await UserSkillProgress.find({ user_id:req.user.id }); res.json(list); };